/*==============================================================
DBMS     :  H2
Version  :  1.4.193
Database :  superbowlDB
Created  :  09.03.2017 00:00:00
Modified :  27.05.2017 00:00:00
==============================================================*/

/*==============================================================
Table: Roadmap
==============================================================*/
CREATE TABLE if not exists Roadmap (
	 roadmap_id							BIGINT			GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1)
	,roadmap_version					INTEGER			NOT	NULL	DEFAULT 0
	,roadmap_feature					VARCHAR(128)	NOT	NULL	DEFAULT	''
	,roadmap_status					VARCHAR(035)	NOT	NULL	DEFAULT	''
	,roadmap_comment					VARCHAR(128)	NOT	NULL	DEFAULT	''
	,roadmap_versionnumber			VARCHAR(020)	NOT	NULL	DEFAULT	''
	,CONSTRAINT roadmap_pk PRIMARY KEY (roadmap_id)
);

comment on table Roadmap is 'A user represents the manufacturing progress state of a artefact (bowl)';
comment on column Roadmap.roadmap_id is 'Unique technical identifier of a Status';
comment on column Roadmap.roadmap_version is 'Version number for optimistic locking';
comment on column Roadmap.roadmap_feature is 'The feature description';
comment on column Roadmap.roadmap_status is 'The status of a new software feature [work planned; work in progress; implementation finished]';
comment on column Roadmap.roadmap_comment is 'The comment about the new implementation';
comment on column Roadmap.roadmap_versionnumber is 'The software version number';

commit;

/*==============================================================
Table: Software
==============================================================*/
CREATE TABLE if not exists Software (
	 software_id						BIGINT			GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1)
	,software_version					INTEGER			NOT	NULL	DEFAULT 0
	,software_vendor					VARCHAR(064)	NOT	NULL	DEFAULT	''
	,software_name						VARCHAR(064)	NOT	NULL	DEFAULT	''
	,software_url						VARCHAR(064)	NOT	NULL	DEFAULT	''
	,software_versionnumber				VARCHAR(064)	NOT	NULL	DEFAULT	''
	,software_type						CHAR(001)		NOT	NULL	DEFAULT	''
	,software_description				VARCHAR(016)	NOT	NULL	DEFAULT	''
	,CONSTRAINT software_pk PRIMARY KEY (software_id)
);

create index software_vendor_idx on Software (software_vendor);

comment on table Software is 'A user represents the manufacturing progress state of a artefact (bowl)';
comment on column Software.software_id is 'Unique technical identifier of a Status';
comment on column Software.software_version is 'Version number for optimistic locking';
comment on column Software.software_vendor is 'The name of the software vendor';
comment on column Software.software_name is 'The name of the software product';
comment on column Software.software_url is 'The URL of the software vendor/product';
comment on column Software.software_versionnumber is 'The version of the software product used in this project';
comment on column Software.software_type is 'The type of sofware [Freeware], [Open Source] or [Commecial]';
comment on column Software.software_description is 'The description of the type of sofware [Freeware], [Open Source] or [Commercial]';

commit;

/*==============================================================
Table: Manufacture
==============================================================*/
create table if not exists Manufacture (
	 manu_id							bigint			generated by default as identity (start with 1, increment by 1)
	,manu_version						integer			not null default 0
	,manu_index							integer			not null default 0
	,manu_year							char(004)		not null default ''
	,constraint manu_pk primary key (manu_id)
);

comment on table Manufacture is 'Contains data about the manufacturing of a bowl';
comment on column Manufacture.manu_id is 'Unique technical identifier of a Status';
comment on column Manufacture.manu_version is 'Version number for optimistic locking';
comment on column Manufacture.manu_index is 'The index (starting at 0) for selection';
comment on column Manufacture.manu_year is 'The manufacturing year of a bowl';

commit;

/*==============================================================
Table: Subuser
==============================================================*/
CREATE TABLE if not exists Subuser (
	 subuser_id							BIGINT			GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1)
	,subuser_version					INTEGER			NOT	NULL	DEFAULT 0
	,subuser_userid						VARCHAR(010)	NOT	NULL	DEFAULT	''
	,subuser_password					VARCHAR(010)	NOT	NULL	DEFAULT	''
	,subuser_username					VARCHAR(035)	NOT	NULL	DEFAULT	''
	,subuser_email						VARCHAR(064)	NOT	NULL	DEFAULT	''
	,subuser_lastlogin					TIMESTAMP
	,subuser_lastlogout					TIMESTAMP
	,subuser_logincount					INTEGER			NOT	NULL	DEFAULT	0
	,subuser_locked						BOOLEAN			NOT	NULL	DEFAULT	FALSE
	,CONSTRAINT subuser_pk PRIMARY KEY (subuser_id)
);

create index subuser_userid_idx on Subuser (subuser_userid);
create index subuser_username_idx on Subuser (subuser_username);
create index subuser_email_idx on Subuser (subuser_email);

comment on table Subuser is 'A user represents the manufacturing progress state of a artefact (bowl)';
comment on column Subuser.subuser_id is 'Unique technical identifier of a Status';
comment on column Subuser.subuser_version is 'Version number for optimistic locking';
comment on column Subuser.subuser_userid is 'The user identification string';
comment on column Subuser.subuser_password is 'The user password';
comment on column Subuser.subuser_username is 'The user name as given by his parents (given name and family name';
comment on column Subuser.subuser_email is 'The user email address';
comment on column Subuser.subuser_lastlogin is 'Timestamp of last login';
comment on column Subuser.subuser_lastlogout is 'Timestamp of last logout';
comment on column Subuser.subuser_logincount is 'The login counter';
comment on column Subuser.subuser_locked is 'Identifies whether the user is locked [true] (cannot login) or not [false]';

commit;

/*==============================================================
Table: Customer
==============================================================*/
create table if not exists Customer (
	 customer_id						bigint			generated by default as identity (start with 1, increment by 1)
	,customer_version					integer			not null default 0
	,customer_index					integer			not null default 0
	,customer_salutation				varchar(015)	not null default ''
	,customer_graduation				varchar(025)	not null default ''
	,customer_givenname					varchar(025)	not null default ''
	,customer_familyname				varchar(035)	not null default ''
	,customer_phone						varchar(025)	not null default ''
	,customer_fax						varchar(025)	not null default ''
	,customer_mobile					varchar(025)	not null default ''
	,customer_email						varchar(050)	not null default ''
	,customer_street					varchar(035)	not null default ''
	,customer_housenumber				varchar(010)	not null default ''
	,customer_zipcode					varchar(010)	not null default ''
	,customer_city						varchar(035)	not null default ''
	,customer_countrycode				varchar(003)	not null default ''
	,customer_country					varchar(035)	not null default ''
	,customer_comment					varchar(256)	not null default ''
	,constraint customer_pk primary key (customer_id)
);

create index customer_familyname_idx on Customer (customer_familyname);
create index customer_email_idx on Customer (customer_email);

comment on table Customer is 'Represents an active participant of the application';
comment on column Customer.customer_id is 'Unique technical identifier of a Status';
comment on column Customer.customer_version is 'Version number for optimistic locking';
comment on column Customer.customer_index is 'The index (starting at 0) for selection';
comment on column Customer.customer_salutation is 'The salutation to a customer [Herr | Frau | Sonstige]';
comment on column Customer.customer_graduation is 'The academic graduation';
comment on column Customer.customer_givenname is 'The given name of the customer';
comment on column Customer.customer_familyname is 'The family name of the customer';
comment on column Customer.customer_phone is 'The phone number of the customer';
comment on column Customer.customer_fax is 'The fax number of the customer';
comment on column Customer.customer_mobile is 'The mobile phone number of the customer';
comment on column Customer.customer_email is 'The email address of the customer';
comment on column Customer.customer_street is 'The street name of the postal address of the customer';
comment on column Customer.customer_housenumber is 'The house number of the postal address of the customer';
comment on column Customer.customer_zipcode is 'The zip code of the postal address of the customer';
comment on column Customer.customer_city is 'The city name of the postal address of the customer';
comment on column Customer.customer_countrycode is 'The country code of the postal address of a customer';
comment on column Customer.customer_country is 'The name of the country [state|nation] a customer lives in';
comment on column Customer.customer_comment is 'Free text to store information about a customer';

commit;

/*==============================================================
Table: Exhibition
==============================================================*/
create table if not exists Exhibition (
	 exhibition_id						bigint			generated by default as identity (start with 1, increment by 1)
	,exhibition_version					integer			not null default 0
	,exhibition_index					integer			not null default 0
	,exhibition_name					varchar(035)	not null default ''
	,exhibition_institution				varchar(035)	not null default ''
	,exhibition_year					char(004)		not null default ''
	,exhibition_date_from				date			not null
	,exhibition_date_to					date			not null
	,exhibition_city					varchar(035)	not null default ''
	,exhibition_country					varchar(035)	not null default ''
	,exhibition_comment					varchar(064)	not null default ''
	,constraint exhibition_pk primary key (exhibition_id)
);

comment on table Exhibition is 'A status represents the manufacturing progress state of a artefact (bowl)';
comment on column Exhibition.exhibition_id is 'Unique technical identifier of a Status';
comment on column Exhibition.exhibition_version is 'Version number for optimistic locking';
comment on column Exhibition.exhibition_index is 'The index (starting at 0) for selection';
comment on column Exhibition.exhibition_name is 'The official name of the exhibition';
comment on column Exhibition.exhibition_institution is 'The official name of the institution where the exhibition occurs';
comment on column Exhibition.exhibition_year is 'The calendar year of the exhibition';
comment on column Exhibition.exhibition_date_from is 'The official start date of the exhibition';
comment on column Exhibition.exhibition_date_to is 'The official end date of the exhibition';
comment on column Exhibition.exhibition_city is 'The name of the city where th exhibition occurs';
comment on column Exhibition.exhibition_country is 'The name of the country where th exhibition occurs';
comment on column Exhibition.exhibition_comment is 'A comment about the Status';

commit;

/*==============================================================
Table: Status
==============================================================*/
create table if not exists Status (
	 status_id							bigint			generated by default as identity (start with 1, increment by 1)
	,status_version					integer			not null default 0
	,status_index						integer			not null default 0
	,status_code						char(004)		not null default ''
	,status_text						varchar(035)	not null default ''
	,status_comment					varchar(064)	not null default ''
	,constraint status_pk primary key (status_id)
);

comment on table Status is 'A status represents the manufacturing progress state of a artefact (bowl)';
comment on column Status.status_id is 'Unique technical identifier of a Status';
comment on column Status.status_version is 'Version number for optimistic locking';
comment on column Status.status_index is 'The index (starting at 0) for selection';
comment on column Status.status_code is 'A short 4-digit abbreviation of a status';
comment on column Status.status_text is 'The textual description (name) of a status';
comment on column Status.status_comment is 'A comment about the Status';

commit;

/*==============================================================
Table: GeoRegion
==============================================================*/
create table if not exists GeoRegion (
	 gr_id						bigint			generated by default as identity (start with 1, increment by 1)
	,gr_version					integer			not null default 0
	,gr_ordinal					integer			not null
	,gr_index					integer			not null default 0
	,gr_code						varchar(010)	not null default 'k.A.'
	,gr_name						varchar(025)	not null default 'k.A.'
	,gr_region					varchar(035)	not null default 'k.A.'
	,constraint gr_pk primary key (gr_id)
);

create index georegion_region_idx on GeoRegion (gr_region);

comment on table GeoRegion is 'Represents a geographic region where timber growths';
comment on column GeoRegion.gr_id is 'Unique technical identifier';
comment on column GeoRegion.gr_version is 'Version number for optimistic locking';
comment on column GeoRegion.gr_ordinal is 'The ordinal number';
comment on column GeoRegion.gr_index is 'The index (starting at 0) for selection';
comment on column GeoRegion.gr_code is 'The 4-digit code';
comment on column GeoRegion.gr_name is 'The name of the continent the geo region belongs to';
comment on column GeoRegion.gr_region is 'The specific region name';

commit;

/*==============================================================
Table: BotanicSystem
==============================================================*/
create table if not exists BotanicSystem (
	 bs_id						bigint			generated by default as identity (start with 1, increment by 1)
	,bs_version					integer			not null default 0
	,bs_ordinal					integer			not null default 0
	,bs_order_index			integer			not null default 0
	,bs_family_index			integer			not null default 0
	,bs_subfamily_index		integer			not null default 0
	,bs_order					varchar(035)	not null default ''
	,bs_family					varchar(035)	not null default ''
	,bs_subfamily 				varchar(035)	not null default ''
	,constraint bs_pk primary key (bs_id)
);

create index bs_ordinal_idx on BotanicSystem (bs_ordinal);

comment on table BotanicSystem is 'Represents the botanical system information a timber relates to';
comment on column BotanicSystem.bs_id is 'Unique technical identifier';
comment on column BotanicSystem.bs_version is 'Version number for optimistic locking';
comment on column BotanicSystem.bs_ordinal is 'The ordinal number of an botanic system instance';
comment on column BotanicSystem.bs_order_index is 'The order index (starting at 0) for selection';
comment on column BotanicSystem.bs_family_index is 'The family index (starting at 0) for selection';
comment on column BotanicSystem.bs_subfamily_index is 'The subfamily index (starting at 0) for selection';
comment on column BotanicSystem.bs_order is 'The botanical order (latin)';
comment on column BotanicSystem.bs_family is 'The botanical family name (latin)';
comment on column BotanicSystem.bs_subfamily is 'The botanical sub family name (latin)';

commit;

/*==============================================================
Table: Timber
==============================================================*/
create table if not exists Timber (
	 timber_id								bigint			generated by default as identity (start with 1, increment by 1)
	,timber_version						integer			not null default 0
	,timber_index							integer			not null default 0
	,timber_georegion_id					bigint			not null
	,timber_botanicsystem_id			bigint			not null
	,timber_type							char(001)		not null default ''
	,timber_code							char(004)		not null default ''
	,timber_name							varchar(035)	not null default ''
	,timber_imagename						varchar(035)	not null default ''
	,timber_academicname					varchar(050)	not null default ''
	,timber_gross_density				varchar(015)	not null default 'k.A.'
	,timber_tensile_strength			varchar(015)	not null default 'k.A.'
	,timber_burst_strength				varchar(015)	not null default 'k.A.'
	,timber_bending_strength			varchar(015)	not null default 'k.A.'
	,timber_shear_strength				varchar(015)	not null default 'k.A.'
	,timber_brinell_hardness1			varchar(015)	not null default 'k.A.'
	,timber_brinell_hardness2			varchar(015)	not null default 'k.A.'
	,timber_tangent_shrinkage			varchar(015)	not null default 'k.A.'
	,timber_radial_shrinkage			varchar(015)	not null default 'k.A.'
	,constraint timber_pk primary key (timber_id)
	,constraint timber_botanicsystem_fk foreign key (timber_botanicsystem_id) references BotanicSystem(bs_id)
	,constraint timber_georegion_fk foreign key (timber_georegion_id) references GeoRegion(gr_id)
);

create index timber_georegion_idx on Timber (timber_georegion_id);
create index timber_botanicsystem_idx on Timber (timber_botanicsystem_id);
create index timber_name_idx on Timber (timber_name);

comment on table Timber is 'Represents some specific about timber used to manufacture bowls';
comment on column Timber.timber_id is 'Unique technical identifier';
comment on column Timber.timber_version is 'Version number for optimistic locking';
comment on column Timber.timber_index is 'The index (starting at 0) for selection';
comment on column Timber.timber_georegion_id is 'Reference to an georegion instance';
comment on column Timber.timber_botanicsystem_id is 'Reference to an botanicsystem instance';
comment on column Timber.timber_type is 'The type of a timber [broadleaved | conifer]';
comment on column Timber.timber_code is '4-character code of a timber';
comment on column Timber.timber_name is 'Free text name';
comment on column Timber.timber_imagename is 'Free text image name';
comment on column Timber.timber_academicname is 'The academic name of a timber (latin)';
comment on column Timber.timber_gross_density is 'The gross density of a timber [Rohdichte]';
comment on column Timber.timber_tensile_strength is 'The tensile strength of a timber [Zugfestigkeit]';
comment on column Timber.timber_burst_strength is 'The burst strength of a timber [Druckfestigkeit]';
comment on column Timber.timber_bending_strength is 'The bending strength of a timber [Biegefestigkeit]';
comment on column Timber.timber_shear_strength is 'The shear strength of a timber [Scherfestigkeit]';
comment on column Timber.timber_brinell_hardness1 is 'The brinell hardness 1 of a timber';
comment on column Timber.timber_brinell_hardness2 is 'The brinell hardness 2 of a timber';
comment on column Timber.timber_tangent_shrinkage is 'The tangent shrinkage of a timber';
comment on column Timber.timber_radial_shrinkage is 'The radial shrinkage of a timber';

commit;

/*==============================================================
Table: TimberOrigin
==============================================================*/
create table if not exists TimberOrigin (
	 to_id						bigint			generated by default as identity (start with 1, increment by 1)
	,to_version					integer			not null default 0
	,to_timber_id				bigint			not null
	,to_index					integer			not null default 0
	,to_city						varchar(032)	not null default ''
	,to_location				varchar(032)	not null default ''
	,to_location_text			varchar(032)	not null default ''
	,to_cutdown					varchar(012)	not null default ''
	,to_comment					varchar(064)	not null default ''
	,constraint to_pk primary key (to_id)
	,constraint to_timber_fk foreign key (to_timber_id) references Timber(timber_id)
);

create index to_timber_idx on TimberOrigin (to_timber_id);
create index to_city_idx on TimberOrigin (to_city);
create index to_location_idx on TimberOrigin (to_location);

comment on table TimberOrigin is 'Represents the original location and the cut down date of the timber raw material used to manufacture a bowl';
comment on column TimberOrigin.to_id is 'Unique technical identifier';
comment on column TimberOrigin.to_version is 'Version number for optimistic locking';
comment on column TimberOrigin.to_timber_id is 'Reference to an timber instance';
comment on column TimberOrigin.to_index is 'The index (starting at 0) for selection';
comment on column TimberOrigin.to_city is 'The origin city of the timber tree';
comment on column TimberOrigin.to_location is 'The origin location of the timber tree';
comment on column TimberOrigin.to_location_text is 'Extended textual description related to the origin location of the timber tree';
comment on column TimberOrigin.to_cutdown is 'The cut down date of a timber tree';
comment on column TimberOrigin.to_comment is 'A comment about the TimberOrigin';

commit;

/*==============================================================
Table: Bowl
==============================================================*/
create table if not exists Bowl (
	 bowl_id									bigint         generated by default as identity (start with 1, increment by 1)
	,bowl_version							integer			not null default 0
	,bowl_index								integer			not null default 0
	,bowl_manufacture_id					bigint			not null
	,bowl_status_id						bigint			not null
	,bowl_timber_id						bigint			not null
	,bowl_timberorigin_id				bigint			not null
	,bowl_customer_id						bigint				 null
	,bowl_exhibition_id					bigint				 null
	,bowl_ordinal							integer			not null
	,bowl_imagename						varchar(032)	not null default ''
	,bowl_price								decimal(7,2)	not null default 0
	,bowl_sales_price						decimal(7,2)		 null default 0
	,bowl_sales_location					varchar(032)	 	 null default ''
	,bowl_sales_date						date				 	 null
	,bowl_comment							varchar(064)	not null default ''
	,constraint bowl_pk primary key (bowl_id)
	,constraint bowl_customer_fk foreign key (bowl_customer_id) references Customer(customer_id)
	,constraint bowl_exhibition_fk foreign key (bowl_exhibition_id) references Exhibition(exhibition_id)
	,constraint bowl_manufacture_fk foreign key (bowl_manufacture_id) references Manufacture(manu_id)
	,constraint bowl_status_fk foreign key (bowl_status_id) references Status(status_id)
	,constraint bowl_timber_fk foreign key (bowl_timber_id) references Timber(timber_id)
	,constraint bowl_timberorigin_fk foreign key (bowl_timberorigin_id) references TimberOrigin(to_id)
);
create unique index bowl_pk on Bowl (bowl_ordinal);
create index bowl_customer_idx on Bowl (bowl_customer_id);
create index bowl_exhibition_idx on Bowl (bowl_exhibition_id);
create index bowl_manufacture_idx on Bowl (bowl_manufacture_id);
create index bowl_status_idx on Bowl (bowl_status_id);
create index bowl_timber_idx on Bowl (bowl_timber_id);
create index bowl_timberorigin_idx on Bowl (bowl_timberorigin_id);

comment on table Bowl is 'Represents a timber bowl as the end product of a manufacturing process';
comment on column Bowl.bowl_id is 'Unique technical identifier of a Status';
comment on column Bowl.bowl_version is 'Version number for optimistic locking';
comment on column Bowl.bowl_index is 'The index (starting at 0) for selection';
comment on column Bowl.bowl_manufacture_id is 'Reference to a manufacture instance';
comment on column Bowl.bowl_status_id is 'Reference to a status instance';
comment on column Bowl.bowl_timber_id is 'Reference to a timber instance';
comment on column Bowl.bowl_timberorigin_id is 'Reference to an timberorigin instance';
comment on column Bowl.bowl_customer_id is 'Reference to a customer instance (nullable)';
comment on column Bowl.bowl_exhibition_id is 'Reference to a exhibition instance (nullable)';
comment on column Bowl.bowl_ordinal is 'The ordinal number of a bowl';
comment on column Bowl.bowl_imagename is 'The name of an image representing the bowl';
comment on column Bowl.bowl_price is 'The price of an artefact';
comment on column Bowl.bowl_sales_price is 'The sales price of a bowl';
comment on column Bowl.bowl_sales_location is 'The sales location';
comment on column Bowl.bowl_sales_date is 'The sales date';
comment on column Bowl.bowl_comment is 'A free text comment related to the bowl';

commit;

/*==============================================================
Table: BowlModStep
==============================================================*/
create table if not exists BowlModStep (
	 bms_id							bigint         generated by default as identity (start with 1, increment by 1)
	,bms_version					integer			not null default 0
	,bms_index						integer			not null default 0
	,bms_code						char(002)		not null default ''
	,bms_name						varchar(064)	not null default ''
	,bms_comment					varchar(256)	not null default ''
	,constraint bms_pk primary key (bms_id)
);

comment on table BowlModStep is 'Represents a modification step during manufacturing process of a timber bowl';
comment on column BowlModStep.bms_id is 'Unique technical identifier of a Status';
comment on column BowlModStep.bms_version is 'Version number for optimistic locking';
comment on column BowlModStep.bms_index is 'The index (starting at 0) for selection';
comment on column BowlModStep.bms_code is 'The 2-digit code';
comment on column BowlModStep.bms_name is 'Name of the modification step';
comment on column BowlModStep.bms_comment is 'Comment about the modification step';

commit;

/*==============================================================
Table: BowlMod
==============================================================*/
create table if not exists BowlMod (
	 bm_id								bigint         generated by default as identity (start with 1, increment by 1)
	,bm_version							integer			not null default 0
	,bm_bowl_id							bigint			not null
	,bm_bms_id							bigint			not null
	,bm_date								date			not null
	,bm_diameter						decimal(7,2)	not null default 0
	,bm_height							decimal(7,2)	not null default 0
	,bm_wallthickness_min 			decimal(7,2)	not null default 0
	,bm_wallthickness_max 			decimal(7,2)	not null default 0
	,bm_granulation					integer			not null default 0
	,bm_tap								integer			not null default 0
	,bm_recess							integer			not null default 0
	,bm_surface							varchar(032)	not null default ''
	,bm_comment							varchar(064)	not null default ''
	,constraint bm_pk primary key (bm_id)
	,constraint bm_bowl_fk foreign key (bm_bowl_id) references Bowl(bowl_id)
	,constraint bm_bms_fk foreign key (bm_bms_id) references BowlModStep(bms_id)
);

create index bm_bowl_idx on BowlMod (bm_bowl_id);
create index bm_bms_idx on BowlMod (bm_bms_id);

comment on table BowlMod is 'Represents the modification process of a timber bowl as a whole';
comment on column BowlMod.bm_id is 'Unique technical identifier of a Status';
comment on column BowlMod.bm_version is 'Version number for optimistic locking';
comment on column BowlMod.bm_bowl_id is 'Reference to a Bowl';
comment on column BowlMod.bm_bms_id is 'Reference to a ModStep';
comment on column BowlMod.bm_date is 'Modification date of a bowl';
comment on column BowlMod.bm_diameter is 'Diameter of a bowl';
comment on column BowlMod.bm_height is 'Height of a bowl';
comment on column BowlMod.bm_wallthickness_min is 'Minimum wallthickness of a bowl';
comment on column BowlMod.bm_wallthickness_max is 'Maximum wallthickness of a bowl';
comment on column BowlMod.bm_granulation is 'Granulation of a bowl';
comment on column BowlMod.bm_tap is 'Tap of a bowl';
comment on column BowlMod.bm_recess is 'Recess of a bowl';
comment on column BowlMod.bm_surface is 'Surface of a bowl';
comment on column BowlMod.bm_comment is 'Comment about the currrent modification of a bowl';

commit;

/*==============================================================
Table: BowlModItem
==============================================================*/
create table if not exists BowlModItem (
	 bmi_id						bigint         generated by default as identity (start with 1, increment by 1)
	,bmi_version				integer			not null default 0
	,bmi_bm_id					bigint			not null
	,bmi_text					varchar(032)	not null default ''
	,bmi_date					date			not null default ''
	,bmi_weight					decimal(7,2)	not null default 0
	,bmi_moisture				decimal(7,2)	not null default 0
	,constraint bmi_pk primary key (bmi_id)
	,constraint bmi_bm_fk foreign key (bmi_bm_id) references BowlMod(bm_id)
);

create index bmi_bm_idx on BowlModItem (bmi_bm_id);

comment on table BowlModItem is 'Represents a modification process during manufacturing of a timber bowl';
comment on column BowlModItem.bmi_id is 'Unique technical identifier of a Status';
comment on column BowlModItem.bmi_version is 'Version number for optimistic locking';
comment on column BowlModItem.bmi_bm_id is 'Reference to a Modification';
comment on column BowlModItem.bmi_text is 'Short description notice of the modification item';
comment on column BowlModItem.bmi_date is 'Date of bowl modification process';
comment on column BowlModItem.bmi_weight is 'Weigth of a modified bowl at modification date';
comment on column BowlModItem.bmi_moisture is 'Moisture of a bowl at modification date';

commit;
